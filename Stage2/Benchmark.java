import ij.ImagePlus;
import ij.IJ;
import ij.process.ImageProcessor;
import ij.plugin.filter.PlugInFilter;
import java.awt.Color;
import java.lang.Math; 

public class Benchmark implements PlugInFilter {
 public int setup(String args, ImagePlus im) {
  return DOES_RGB;
 }

 public void run(ImageProcessor ip) {
  int width = ip.getWidth(), 
        height = ip.getHeight(),
        totalR = 0,
        totalG = 0,
        totalB = 0;
  double coeff = width * height;
  Color color;
  double[] r = new double[256],
            g = new double[256],
            b = new double[256],
            rn = {0.00000,0.00003,0.00066,0.00354,0.00764,0.01087,0.01372,0.01678,0.02007,0.02290,0.02655,0.03006,0.03415,0.03844,0.04297,0.04766,0.05259,0.05754,0.06341,0.07029,0.07700,0.08389,0.09068,0.09775,0.10441,0.11127,0.11779,0.12493,0.13204,0.13866,0.14542,0.15188,0.15792,0.16421,0.17096,0.17739,0.18385,0.18987,0.19658,0.20281,0.20876,0.21536,0.22124,0.22698,0.23274,0.23885,0.24505,0.25131,0.25788,0.26385,0.26928,0.27507,0.28124,0.28761,0.29408,0.30027,0.30646,0.31254,0.31874,0.32483,0.33115,0.33747,0.34325,0.34900,0.35483,0.36020,0.36546,0.37071,0.37574,0.38043,0.38531,0.39024,0.39491,0.39983,0.40456,0.40938,0.41375,0.41790,0.42233,0.42699,0.43125,0.43541,0.43983,0.44415,0.44845,0.45286,0.45776,0.46239,0.46660,0.47087,0.47487,0.47919,0.48297,0.48697,0.49146,0.49541,0.49984,0.50455,0.50895,0.51335,0.51854,0.52348,0.52859,0.53368,0.53834,0.54294,0.54778,0.55263,0.55730,0.56231,0.56704,0.57159,0.57638,0.58134,0.58594,0.59100,0.59591,0.60085,0.60581,0.61091,0.61561,0.62090,0.62599,0.63104,0.63560,0.64031,0.64503,0.65014,0.65496,0.65995,0.66481,0.66951,0.67418,0.67834,0.68256,0.68654,0.69025,0.69417,0.69833,0.70272,0.70719,0.71185,0.71640,0.72062,0.72490,0.72965,0.73474,0.73932,0.74355,0.74791,0.75225,0.75702,0.76153,0.76671,0.77202,0.77822,0.78506,0.79208,0.79896,0.80719,0.81529,0.82355,0.83030,0.83672,0.84232,0.84743,0.85205,0.85660,0.86081,0.86407,0.86716,0.86967,0.87187,0.87387,0.87564,0.87721,0.87866,0.88021,0.88140,0.88247,0.88355,0.88474,0.88599,0.88765,0.88957,0.89142,0.89362,0.89551,0.89881,0.90337,0.91165,0.92100,0.92919,0.93703,0.94653,0.95756,0.96873,0.98144,0.99152,0.99756,0.99937,0.99991,0.99996,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000},
            gn = {0.00000,0.00001,0.00065,0.00343,0.00744,0.01077,0.01378,0.01687,0.02003,0.02380,0.02764,0.03247,0.03853,0.04592,0.05458,0.06416,0.07534,0.08716,0.09943,0.11147,0.12265,0.13395,0.14410,0.15476,0.16479,0.17435,0.18359,0.19307,0.20277,0.21200,0.22079,0.22907,0.23748,0.24594,0.25487,0.26459,0.27298,0.28131,0.28979,0.29729,0.30514,0.31300,0.32110,0.32907,0.33696,0.34529,0.35294,0.36184,0.37054,0.37908,0.38782,0.39639,0.40497,0.41392,0.42209,0.42999,0.43779,0.44528,0.45271,0.45980,0.46656,0.47354,0.48001,0.48665,0.49260,0.49865,0.50494,0.51071,0.51627,0.52183,0.52804,0.53322,0.53878,0.54407,0.54917,0.55380,0.55822,0.56255,0.56666,0.57106,0.57566,0.58065,0.58526,0.59049,0.59487,0.59916,0.60422,0.60989,0.61480,0.61949,0.62422,0.62941,0.63496,0.64011,0.64577,0.65219,0.65864,0.66491,0.67035,0.67534,0.68004,0.68460,0.68917,0.69409,0.69811,0.70216,0.70640,0.71075,0.71504,0.71924,0.72376,0.72791,0.73238,0.73667,0.74125,0.74520,0.74894,0.75304,0.75723,0.76205,0.76717,0.77259,0.77895,0.78573,0.79285,0.80209,0.81069,0.81923,0.82740,0.83494,0.84083,0.84548,0.84950,0.85298,0.85553,0.85755,0.85909,0.86044,0.86159,0.86292,0.86384,0.86480,0.86568,0.86631,0.86679,0.86697,0.86720,0.86735,0.86762,0.86771,0.86798,0.86824,0.86839,0.86861,0.86885,0.86907,0.86931,0.86953,0.86976,0.87002,0.87025,0.87063,0.87092,0.87114,0.87150,0.87185,0.87224,0.87272,0.87306,0.87360,0.87395,0.87447,0.87498,0.87550,0.87611,0.87678,0.87739,0.87808,0.87873,0.87950,0.88007,0.88087,0.88170,0.88269,0.88380,0.88504,0.88656,0.88814,0.89016,0.89216,0.89480,0.89725,0.90058,0.90639,0.91785,0.93184,0.94412,0.95475,0.96611,0.97986,0.99108,0.99760,0.99941,0.99993,0.99996,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000},
            bn = {0.00002,0.00036,0.00200,0.00591,0.01206,0.01937,0.02921,0.04149,0.05639,0.07247,0.08909,0.10413,0.11923,0.13295,0.14653,0.15866,0.17165,0.18409,0.19658,0.20921,0.22130,0.23350,0.24513,0.25643,0.26696,0.27804,0.28922,0.30071,0.31207,0.32323,0.33431,0.34556,0.35686,0.36753,0.37832,0.38886,0.39924,0.40950,0.41994,0.43028,0.43949,0.44844,0.45744,0.46621,0.47528,0.48288,0.49101,0.49880,0.50706,0.51486,0.52238,0.52953,0.53637,0.54328,0.54973,0.55605,0.56213,0.56800,0.57361,0.57927,0.58516,0.59046,0.59565,0.60087,0.60668,0.61233,0.61814,0.62377,0.62954,0.63527,0.64062,0.64598,0.65069,0.65527,0.65901,0.66312,0.66734,0.67116,0.67498,0.67903,0.68293,0.68704,0.69110,0.69521,0.69908,0.70347,0.70741,0.71107,0.71465,0.71809,0.72210,0.72640,0.73040,0.73507,0.73946,0.74422,0.74902,0.75487,0.76165,0.76903,0.77716,0.78530,0.79267,0.79929,0.80515,0.81017,0.81504,0.81998,0.82533,0.83037,0.83493,0.83966,0.84399,0.84769,0.85119,0.85387,0.85598,0.85771,0.85912,0.86020,0.86115,0.86187,0.86259,0.86294,0.86321,0.86345,0.86372,0.86392,0.86413,0.86442,0.86468,0.86485,0.86513,0.86524,0.86543,0.86554,0.86581,0.86601,0.86610,0.86630,0.86653,0.86667,0.86683,0.86707,0.86726,0.86735,0.86757,0.86783,0.86801,0.86819,0.86840,0.86856,0.86873,0.86899,0.86924,0.86950,0.86972,0.86991,0.87015,0.87037,0.87068,0.87101,0.87144,0.87189,0.87225,0.87263,0.87295,0.87329,0.87378,0.87424,0.87491,0.87546,0.87601,0.87660,0.87723,0.87788,0.87850,0.87913,0.87994,0.88073,0.88147,0.88240,0.88347,0.88468,0.88614,0.88780,0.88944,0.89137,0.89330,0.89600,0.89844,0.90171,0.90692,0.91811,0.93185,0.94405,0.95466,0.96592,0.97980,0.99084,0.99748,0.99928,0.99990,0.99996,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000};
  for (int row = 0; row < height; row++)
   for (int col = 0; col < width; col++) {
    color = new Color(ip.getPixel(col, row));
    r[color.getRed()] += 1;
    g[color.getGreen()] += 1;
    b[color.getBlue()] += 1;
   }
  for (int i = 0; i < 256; i++) {
      totalR += r[i];
      totalG += g[i];
      totalB += b[i];
      r[i] = totalR / coeff;
      g[i] = totalG / coeff;
      b[i] = totalB / coeff;
  }

   for (int row = 0; row < height; row++) {
    for (int col = 0; col < width; col++) {
        color = new Color(ip.getPixel(col, row));
        double currentR = r[color.getRed()] ;
        double currentG = g[color.getGreen()] ;
        double currentB = b[color.getBlue()] ;
        double currentDiffR = 100;
        double currentDiffG = 100;
        double currentDiffB = 100;
        int[] currentVal = new int[3];
        for (int j = 0; j < 256; j++) {
            double diffR = Math.abs(currentR - rn[j]);
            double diffG = Math.abs(currentG - gn[j]);
            double diffB = Math.abs(currentB - bn[j]);
            if (diffR < currentDiffR) {
                currentDiffR = diffR;
                currentVal[2] = j;
            }
            if (diffG < currentDiffG) {
                currentDiffG = diffG;
                currentVal[1] = j;
            }
            if (diffB < currentDiffB) {
                currentDiffB = diffB;
                currentVal[0] = j;
            }
        }
        ip.putPixel(col, row, currentVal);
    }
   }
 }
}