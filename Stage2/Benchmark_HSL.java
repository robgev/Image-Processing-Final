import ij.ImagePlus;
import ij.IJ;
import ij.process.ImageProcessor;
import ij.plugin.filter.PlugInFilter;
import java.awt.Color;
import java.lang.Math; 

public class Benchmark_HSL implements PlugInFilter {
 public int setup(String args, ImagePlus im) {
  return DOES_RGB;
 }

 public void run(ImageProcessor ip) {
  int width = ip.getWidth(), 
        height = ip.getHeight(),
        totalH = 0,
        totalS = 0,
        totalV = 0;
  double coeff = width * height;
  float[] hsv = new float[3];
  Color color;
  double[] h = new double[360],
            s = new double[101],
            v = new double[101],
            hn = {0.01630,0.01766,0.01926,0.02081,0.02231,0.02302,0.02444,0.02713,0.02888,0.03045,0.03683,0.04174,0.04406,0.05429,0.05884,0.07553,0.09643,0.10776,0.13193,0.16306,0.18156,0.23084,0.26786,0.32314,0.34653,0.38066,0.44528,0.47030,0.50558,0.52460,0.58715,0.60991,0.64682,0.65884,0.68262,0.70219,0.70659,0.73491,0.74012,0.75559,0.75683,0.77166,0.78710,0.79168,0.79699,0.80403,0.80409,0.80479,0.81437,0.82563,0.82566,0.82693,0.82734,0.82734,0.82738,0.82738,0.82748,0.82751,0.82751,0.82751,0.84114,0.84114,0.84114,0.84120,0.84131,0.84131,0.84131,0.84187,0.84192,0.84203,0.84470,0.84470,0.85223,0.85223,0.85223,0.85223,0.85229,0.85231,0.85231,0.85244,0.85244,0.85244,0.85244,0.85244,0.85417,0.85467,0.85468,0.85468,0.85468,0.85468,0.85468,0.85468,0.85468,0.85468,0.85468,0.85470,0.85470,0.85470,0.85470,0.85470,0.86076,0.86076,0.86090,0.86092,0.86092,0.86092,0.86092,0.86092,0.86092,0.86092,0.86157,0.86157,0.86165,0.86165,0.86165,0.86165,0.86165,0.86165,0.86165,0.86165,0.86176,0.86176,0.86176,0.86176,0.86176,0.86176,0.86176,0.86176,0.86176,0.86176,0.86176,0.86176,0.86803,0.86803,0.86803,0.86803,0.86804,0.86804,0.86804,0.86843,0.86843,0.86843,0.86843,0.86843,0.86843,0.86843,0.86847,0.86848,0.86848,0.86848,0.94162,0.94162,0.94162,0.94162,0.94162,0.94162,0.94162,0.94162,0.94165,0.94165,0.94358,0.94358,0.94358,0.94358,0.94358,0.98034,0.98034,0.98034,0.98034,0.98034,0.98034,0.98034,0.98034,0.98046,0.98047,0.98047,0.98047,0.98047,0.98047,0.98047,0.98146,0.98146,0.98146,0.98146,0.98146,0.98154,0.98154,0.98154,0.98154,0.98162,0.98162,0.98532,0.98532,0.98532,0.98532,0.98532,0.98544,0.98544,0.98544,0.98544,0.98544,0.98548,0.98588,0.98588,0.98588,0.98636,0.98650,0.98653,0.98653,0.98653,0.98654,0.98654,0.98660,0.98660,0.98660,0.98660,0.98660,0.98673,0.98673,0.98673,0.98863,0.98871,0.98871,0.98871,0.98874,0.98874,0.98874,0.98874,0.98893,0.98893,0.98901,0.98902,0.98903,0.98903,0.98903,0.98903,0.98903,0.98903,0.98903,0.98903,0.99012,0.99012,0.99012,0.99012,0.99012,0.99012,0.99012,0.99012,0.99012,0.99021,0.99022,0.99022,0.99044,0.99044,0.99044,0.99044,0.99044,0.99044,0.99044,0.99044,0.99047,0.99047,0.99047,0.99047,0.99050,0.99054,0.99054,0.99054,0.99054,0.99054,0.99054,0.99054,0.99054,0.99054,0.99054,0.99054,0.99056,0.99056,0.99056,0.99071,0.99071,0.99071,0.99071,0.99071,0.99071,0.99071,0.99071,0.99071,0.99071,0.99071,0.99074,0.99074,0.99074,0.99074,0.99074,0.99074,0.99074,0.99074,0.99074,0.99074,0.99075,0.99075,0.99075,0.99075,0.99075,0.99075,0.99075,0.99075,0.99075,0.99075,0.99075,0.99075,0.99078,0.99078,0.99078,0.99078,0.99078,0.99078,0.99078,0.99078,0.99080,0.99080,0.99080,0.99080,0.99080,0.99080,0.99080,0.99081,0.99081,0.99081,0.99143,0.99143,0.99143,0.99143,0.99143,0.99143,0.99143,0.99143,0.99143,0.99143,0.99151,0.99151,0.99151,0.99151,0.99151,0.99166,0.99166,0.99166,0.99168,0.99169,0.99181,0.99185,0.99198,0.99250,0.99299,0.99371,0.99544,0.99692,0.99841,1.00000},
            sn = {0.02091,0.09353,0.13938,0.14619,0.14912,0.15092,0.15218,0.15325,0.15422,0.15485,0.15564,0.15651,0.15720,0.15797,0.15871,0.15972,0.16076,0.16151,0.16277,0.16334,0.16546,0.16654,0.16864,0.17000,0.17107,0.17478,0.17685,0.18022,0.18521,0.19106,0.20047,0.21390,0.23141,0.25826,0.28310,0.30936,0.33501,0.35989,0.38732,0.40872,0.43871,0.46254,0.48788,0.51027,0.53655,0.56513,0.59262,0.62153,0.64958,0.66554,0.70823,0.73350,0.76388,0.78797,0.81156,0.83609,0.85734,0.87811,0.89575,0.91026,0.92787,0.94104,0.95327,0.96098,0.96792,0.97493,0.98011,0.98310,0.98721,0.98916,0.99179,0.99350,0.99503,0.99622,0.99658,0.99770,0.99814,0.99868,0.99906,0.99921,0.99953,0.99958,0.99969,0.99984,0.99986,0.99988,0.99989,0.99991,0.99995,0.99995,0.99996,0.99997,0.99998,0.99998,0.99998,0.99998,0.99998,0.99998,0.99998,0.99998,1.00000},
            vn = {0.00060,0.00966,0.01592,0.02498,0.03254,0.04706,0.05718,0.07688,0.09058,0.11121,0.13202,0.14537,0.16420,0.17738,0.19655,0.20876,0.22697,0.23885,0.25785,0.26927,0.28755,0.30645,0.31873,0.33741,0.34895,0.36536,0.37566,0.39017,0.39979,0.41371,0.42686,0.43536,0.44835,0.45766,0.47074,0.47903,0.49127,0.49964,0.51319,0.52331,0.53818,0.55252,0.56212,0.57599,0.58566,0.60047,0.61050,0.62556,0.63516,0.64962,0.66433,0.67364,0.68601,0.69359,0.70649,0.71567,0.72892,0.73853,0.75145,0.76059,0.77713,0.79779,0.81393,0.83509,0.84546,0.85847,0.86484,0.87123,0.87437,0.87815,0.88068,0.88250,0.88629,0.88990,0.89713,0.90604,0.94363,0.96584,0.99749,0.99993,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000};
  for (int row = 0; row < height; row++)
   for (int col = 0; col < width; col++) {
    color = new Color(ip.getPixel(col, row));
    Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(), hsv);
    h[(int) (hsv[0] * 360) % 360]  += 1;
    s[(int) (hsv[1] * 100)] += 1;
    v[(int) (hsv[2] * 100)] += 1;
   }
   for (int i = 0; i < 360; i++) {
      totalH += h[i];
      h[i] = totalH / coeff;
  }
  for (int i = 0; i < 101; i++) {
      totalS += s[i];
      totalV += v[i];  

      s[i] = totalS / coeff;
      v[i] = totalV / coeff;    
  }
   for (int row = 0; row < height; row++) {
    for (int col = 0; col < width; col++) {
        color = new Color(ip.getPixel(col, row));
        Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(), hsv);
        double currentH = h[(int) (hsv[0] * 360) % 360] ;
        double currentS = s[(int) (hsv[1] * 100)] ;
        double currentV = v[(int) (hsv[2] * 100)] ;
        double currentDiffH = 1000;
        double currentDiffS = 1000;
        double currentDiffV = 1000;
        float adjustedH = 1000;
        float adjustedS = 1000;
        float adjustedV = 1000;
        int[] currentVal = new int[3];
        for (int j = 0; j < 360; j++) {
            double diffH = Math.abs(currentH - hn[j]);
            if (diffH < currentDiffH) {
                currentDiffH = diffH;
                adjustedH = (float) j / 360;
            }
        }
        for (int j = 0; j < 101; j++) {
            double diffS = Math.abs(currentS - sn[j]);
            double diffV = Math.abs(currentV - vn[j]);
            if (diffS < currentDiffS) {
                currentDiffS = diffS;
                adjustedS = (float) j / 100;
            }
            if (diffV < currentDiffV) {
                currentDiffV = diffV;
                adjustedV = (float) j / 100;
            }
        }
        ip.putPixel(col, row, Color.HSBtoRGB(adjustedH, adjustedS, adjustedV));
    }
   }
 }
}